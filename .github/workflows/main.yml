# This is a basic workflow to help you get started with Actions

name: CI/CD


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: Unit Tests
    runs-on: windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      # NuGet restore
      - name: Restore Packages
        run: nuget restore

      # Build
      - name: Build Solution
        run: |
          msbuild.exe AutomationScript.sln /p:platform="Any CPU" /p:configuration="Release"

      # Run unit tests
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1
      - name: Run Tests
        run: vstest.console.exe **\bin\**\*.UnitTests.dll /logger:trx

  upload:
    runs-on: ubuntu-latest
    needs: test
    name: Upload to DCP Storage

    outputs:
      artifact-id: ${{ steps.upload-step.outputs.artifact-id }}

    steps:
      - uses: actions/checkout@v3

      - name: Skyline DataMiner Upload Action
        id: upload-step
        uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action@v1.0.3
        with:
          # Stage upload
          stage: Upload
          # The API-key generated in the DCP Admin app as authentication for a certain DataMiner System. E.g. g597e77412e34297b827c2570a8fa2bc
          api-key: ${{ secrets.DATAMINER_DEPLOY_KEY }}
          # The path to the .sln file of the solution. Atm only DataMiner Automation Script solutions are supported. E.g ./Example/Script.sln.
          solution-path: ./AutomationScript.sln
          # The chosen name of the package. E.g. MyPackageName.
          package-name: London-IP-Flow-Management
          # The version number for the package (format A.B.C). E.g. 1.0.1.
          version: 1.0.1

  deploy_stag:
    runs-on: ubuntu-latest
    needs: upload
    name: Deploy to DMS [Staging]

    steps:
      - name: Skyline DataMiner Deploy Action
        uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action@v1.0.3
        with:
          # Stage deploy
          stage: Deploy
          # The API-key generated in the DCP Admin app as authentication for a certain DataMiner System. E.g. g597e77412e34297b827c2570a8fa2bc
          api-key: ${{ secrets.DATAMINER_DEPLOY_KEY }}
          # Id of the uploaded artifact
          artifact-id: ${{ needs.upload.outputs.artifact-id }}

  publish:
    runs-on: ubuntu-latest
    needs: deploy_stag
    name: Publish to Private Catalog

    steps:
      - name: Run a one-line script
        run: echo Publish to private catalog

  deploy_prod:
    runs-on: ubuntu-latest
    needs:
      - deploy_stag
      - publish
      - upload

    environment: production
    name: Deploy to DMS [Production]

    steps:
      - name: Skyline DataMiner Deploy Action
        uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action@v1.0.3
        with:
          # Stage deploy
          stage: Deploy
          # The API-key generated in the DCP Admin app as authentication for a certain DataMiner System. E.g. g597e77412e34297b827c2570a8fa2bc
          api-key: ${{ secrets.DATAMINER_DEPLOY_KEY }}
          # Id of the uploaded artifact
          artifact-id: ${{ needs.upload.outputs.artifact-id }}
